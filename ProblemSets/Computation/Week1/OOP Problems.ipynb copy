{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ILDEBRANDO MAGNANI\n",
    "\n",
    "### OOP Problems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem 1 and 3:\n",
    "\n",
    "class Backpack(object):\n",
    "    \n",
    "    def __init__(self, name, color, max_size=5):\n",
    "    \n",
    "        self.name = name\n",
    "        self.color = color\n",
    "        self.max_size = max_size\n",
    "        self.contents = []\n",
    "    \n",
    "    def put(self, item):\n",
    "        \n",
    "        if len(self.contents) > self.max_size:\n",
    "            print(\"No Room!\")\n",
    "        \n",
    "        else:\n",
    "            self.contents.append(item)\n",
    "        \n",
    "    def take(self, item):\n",
    "        \n",
    "        self.contents.remove(item)\n",
    "    \n",
    "    def dump(self):\n",
    "        \n",
    "        self.contents = []\n",
    "        \n",
    "    def __eq__(self, other):\n",
    "        \n",
    "        return (self.color         ==     other.color          and \\\n",
    "                self.name          ==     other.name           and \\\n",
    "                len(self.contents) ==     len(other.contents))\n",
    "    \n",
    "    def __str(self):\n",
    "        \n",
    "        return \"{}{}{}{}{}{}{}{}{}{}\".format('\\n Owner:     \\t\\t', self.name,\n",
    "                                             '\\n Colour:    \\t\\t', self.colour,\n",
    "                                             '\\n Size:      \\t\\t', len(self.contents),\n",
    "                                             '\\n Max Size:  \\t'  , self.max_size,\n",
    "                                             '\\n Contents:  \\t'  , self.contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Room!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['bag', 'paper', 'notebook', 'pencil', 'pen']"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myBack = Backpack(\"Brando\", \"Red\", 4)\n",
    "myBack.put(\"bag\")\n",
    "myBack.put(\"paper\")\n",
    "myBack.put(\"notebook\")\n",
    "myBack.put(\"pencil\")\n",
    "myBack.put(\"pen\")\n",
    "myBack.put(\"calculator\")\n",
    "\n",
    "myBack.contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bag', 'notebook', 'pencil', 'pen']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myBack.take(\"paper\")\n",
    "myBack.contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myBack.dump()\n",
    "myBack.contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem 2:\n",
    "\n",
    "class Jetpack(Backpack):\n",
    "    \n",
    "    def __init__(self, name, color, max_size=2, fuel=10):\n",
    "        \n",
    "        Backpack.__init__(self, name, color, max_size)\n",
    "        self.fuel = fuel\n",
    "        \n",
    "    def fly(self, fuel_fly):\n",
    "        \n",
    "        if fuel_fly > self.fuel:\n",
    "            print(\"Not Enough Fuel!\")\n",
    "            \n",
    "        else:\n",
    "            self.fuel = self.fuel - fuel_fly\n",
    "            \n",
    "    def dump(self):\n",
    "        \n",
    "        self.contents = []\n",
    "        self.fuel = 0       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fuel Remaining = 8\n"
     ]
    }
   ],
   "source": [
    "myj = Jetpack(\"bra\", \"red\")\n",
    "myj.fly(2)\n",
    "print(\"Fuel Remaining =\", myj.fuel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Fuel!\n"
     ]
    }
   ],
   "source": [
    "myj.fly(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contents:  []\n",
      "Fuel Remaining = 0\n"
     ]
    }
   ],
   "source": [
    "myj.dump()\n",
    "print(\"Contents: \", myj.contents)\n",
    "print(\"Fuel Remaining =\", myj.fuel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
